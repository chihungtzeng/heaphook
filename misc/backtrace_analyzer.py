#!/usr/bin/python3
# pylint: disable=invalid-name
"""
Parse the backtrace file generated by libpreloaded_backtrace.so and output
source code filename names and line numbers.

Example usage:
    python /path/heaphook/misc/backtrace_analyzer.py -i top_num_calls_bt.823090.log | c++filt
"""

import argparse
import io
import os
import re
import subprocess
from dataclasses import dataclass

BT_RGX = re.compile(r"(?P<elf>[^\(]+)\((?P<mangled_func_name>.*)\+(?P<elf_hex_offset>0x[a-f\d]+)\)")

@dataclass
class BackTrace:
    """backtrace info"""
    elf: str = ""
    elf_hex_offset: str = ""


def _parse_bt_line(line):
    bt = BackTrace()
    match = BT_RGX.match(line)
    if match:
        bt.elf = match.expand(r"\g<elf>")
        bt.elf_hex_offset = match.expand(r"\g<elf_hex_offset>")
    return bt


def __test_parse_bt_line():
    lines = [
        ("/opt/ros/humble/lib/librclcpp.so(_ZN6rclcpp8Executor22execute_any_"
         "executableERNS_13AnyExecutableE+0x81) [0x712ae9355f61]"),
        "./image_sender(+0x3fbef) [0x621f3b919bef]",
        "/lib/x86_64-linux-gnu/libstdc++.so.6(_Znwm+0x1c) [0x712ae8aae98c]"]
    for line in lines:
        obj = _parse_bt_line(line)
        print(line)
        print(obj)
        print("")


def _analyze_bt(backtrace_filename):
    if not os.path.isfile(backtrace_filename):
        print(f"No such file: {backtrace_filename}")
        return
    with io.open(backtrace_filename, encoding="utf-8") as _fp:
        lines = _fp.read().splitlines()

    for line in lines:
        bt = _parse_bt_line(line)
        filename_lineno = ""
        if bt.elf and bt.elf_hex_offset:
            cmd = ["addr2line", "-e", bt.elf, "-i", bt.elf_hex_offset]
            try:
                filename_lineno = subprocess.check_output(cmd).decode("utf-8").strip()
            except subprocess.CalledProcessError:
                print(f"Fail to execute {cmd}")
        if filename_lineno:
            print(f"{line} - {filename_lineno}")
        else:
            print(line)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("--backtrace-filename", "-i", required=True,
                        help="backtrace file like top_alloc_bytes_bt.123.log")
    args = parser.parse_args()
    _analyze_bt(args.backtrace_filename)
